<style>
	select {
		width: 75%;
	}
</style>
<div class="container">
	<div class="py-5 text-center">
		<h1 style="color: rgb(71, 71, 172);">Checkout</h1>
	</div>

	<div class="row">
		<div class="col-md-4 order-md-2 mb-4">
			<h4 class="d-flex justify-content-between align-items-center mb-3">
			</h4>
			<ul class="list-group mb-3">
				<li class="list-group-item d-flex justify-content-between lh-condensed">
					<div>
						<h6 class="my-0">Cart total</h6>
						<small class="text-muted"></small>
					</div>
					<span class="text-muted">Rs.<%= totals %></span>
				</li>
				<li class="list-group-item d-flex justify-content-between bg-light">
					<div class="text-success">
						<h6 class="my-0">Promo code</h6>
					</div>
					<span id="p2" class="text-success">-Rs.0</span>
				</li>
				<li class="list-group-item d-flex justify-content-between">
					<span>Total (Rs)</span>
					<strong id="p1">Rs.0</strong>
				</li>
			</ul>
			<form id="couponform" class="card p-2">

				<div class="input-group d-flex">
					<select class="form-control option-w3ls" name="coupon" aria-label="Default select example">
						<option selected disabled>Choose...</option>
						<% coupon.forEach(function(coupon) { %>
							<option value="<%= coupon.couponCode %>">
								<%= coupon.couponCode %>
							</option>
							<% }) %>
					</select>
					<input type="hidden" class="form-control" name="amount" value="<%= totals %>">
					<button type="submit" class="btn btn-primary">Redeem</button>
				</div>
				<h5 class="text-success text-center" id="success"></h5>
			</form>
		</div>
		<div class="col-md-8 order-md-1">
			<h4 class="mb-3">Billing address</h4>
			<form id="form" class="needs-validation" novalidate>
				<div class="row">
					<div class="col-md-6 mb-3">
						<label for="firstName">First name</label>
						<input type="text" class="form-control" name="fname" placeholder="" value="<%= profile.fname %>"
							required>
						<div class="invalid-feedback">
							Valid first name is required.
						</div>
					</div>
					<div class="col-md-6 mb-3">
						<label for="lastName">Last name</label>
						<input type="text" class="form-control" name="lname" placeholder="" value="<%= profile.lname %>"
							required>
						<div class="invalid-feedback">
							Valid last name is required.
						</div>
					</div>
				</div>
				<div class="mb-3">
					<label for="email">Email <span class="text-muted"></span></label>
					<input type="email" class="form-control" name="email" value="<%= profile.email %>"
						placeholder="you@example.com" required>
					<div class="invalid-feedback">
						Please enter a valid email address for shipping updates.
					</div>

				</div>
				<div class="mb-3">
					<label for="email">Phone Number <span class="text-muted"></span></label>
					<input type="text" class="form-control" name="phonenumber" value="<%= profile.phonenumber %>"
						placeholder="123..." required>
					<div class="invalid-feedback">
						Please enter a valid phone number for shipping updates.
					</div>
				</div>
				<% if(profile.address.length> 0) { %>
					<div class="mb-3">
						<label for="address"> Choose Address</label>
						<br>
						<select class="form-control option-w3ls" name="addressOption"
							aria-label="Default select example">
							<option selected disabled>Select address...</option>
							<% for(let i=0;i<profile.address.length ;i++){ %>
								<option value="<%=profile.address[i].address %>">
									<%= profile.address[i].address %>
								</option>
								<% } %>
						</select>
					</div>
					<% } %>
						<div class="mb-3">
							<label for="address">Address</label>
							<input type="text" class="form-control" name="address" value="" placeholder="1234 Main St"
								required>
							<div class="invalid-feedback">
								Please enter your shipping address.
							</div>
						</div>

						<div class="row">
							<div class="col-md-5 mb-3">
								<label for="country">Country</label>
								<input type="text" class="form-control" name="country" value="" placeholder="" required>
								<div class="invalid-feedback">
									Please select a valid country.
								</div>
							</div>
							<div class="col-md-4 mb-3">
								<label for="state">State</label>
								<input type="text" class="form-control" name="state" value="" placeholder="" required>
								<div class="invalid-feedback">
									Please provide a valid state.
								</div>
							</div>
							<div class="col-md-3 mb-3">
								<label for="zip">Zip</label>
								<input type="text" class="form-control" name="zip" value="" placeholder="" required>
								<div class="invalid-feedback">
									Zip code required.
								</div>
							</div>
							<input type="hidden" class="form-control" name="currency" value="INR">

							<input type="hidden" id="newTotal" class="form-control" name="discountedTotal" value="0">

							<input type="hidden" class="form-control" name="amount" value="<%= totals %>">
						</div>
						<h4 class="mb-3">Payment</h4>
						<div class="row">
							<div class="col-md-5 mb-3">
								<select class="form-control option-w3ls" name="payment" required>
									<option value="COD">Cash On delivery</option>
									<option value="Razorpay">Razorpay</option>
									<option value="Paypal">Paypal</option>
								</select>
								<div class="invalid-feedback">
									Please select a valid payment.
								</div>
							</div>
						</div>
						<hr class="mb-4">
						<button class="btn btn-primary btn-lg btn-block" type="submit">Continue</button>
			</form>
		</div>
	</div>
	<br>
</div>

<div id="paypal-button-container"></div>

<script src="js/jquery-2.2.3.min.js"></script>
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>
<script src="https://www.paypal.com/sdk/js?client-id=test&currency=USD"></script>

<script>

	const couponform = document.getElementById('couponform');
	couponform.addEventListener('submit', async (e) => {
		e.preventDefault();

		const couponCode = couponform.coupon.value;
		const total = couponform.amount.value;

		try {
			let coupon = await fetch('/applyCoupon', {
				method: 'post',
				body: JSON.stringify({ couponCode, total }),
				headers: { 'Content-Type': 'application/json' }
			});
			coupon = await coupon.json();
			const newTotal = coupon.discountedTotal
			const couponVal = coupon.couponValue

			if (coupon.msg == 'already used this coupon') {
				document.getElementById('success').innerHTML = "Already Applied"
				document.getElementById("p1").innerHTML = total;
			} else if (coupon.msg == 'purchase amount is not enough') {
				document.getElementById('success').innerHTML = "Amount is not enough"
				document.getElementById("p1").innerHTML = total;
			} else {
				document.getElementById("p1").innerHTML = "Rs." + newTotal;
				document.getElementById("p2").innerHTML = "Rs." + couponVal;
				document.getElementById("newTotal").value = newTotal;
				document.getElementById('success').innerHTML = "Coupon Applied";
			}
		} catch (err) {
			console.log(err);
		}
	})

	const form = document.querySelector("#form");

	form.addEventListener('submit', async (e) => {
		e.preventDefault();
		//get the values
		const fname = form.fname.value;
		const lname = form.lname.value;
		const email = form.email.value;
		const phonenumber = form.phonenumber.value;

		const address = form.address.value;

		const addressOption = function (addressOption = "") {
			return addressOption = form.addressOption.value;
		}
		const addressopt = addressOption();

		const country = form.country.value;
		const state = form.state.value;
		const zip = form.zip.value;
		const payment = form.payment.value;
		const currency = form.currency.value;
		const amount = form.amount.value;
		const discountedTotal = form.discountedTotal.value;

		try {
			let order = await fetch('/checkout', {
				method: 'post',
				body: JSON.stringify({ fname, lname, email, phonenumber, address, addressopt, country, state, zip, payment, currency, amount, discountedTotal }),
				headers: { 'Content-Type': 'application/json' }
			});

			order = await order.json();

			if (order.success) {
				location.assign('/orderStatus');

			} else if (order.id === 'Paypal') {
				paypal.Buttons({

					// Order is created on the server and the order id is returned
					createOrder: (data, actions) => {
						return fetch('/paymentPaypal', {
							method: "post",
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify({ amount, currency, address, payment, order }),
							// use the "body" param to optionally pass additional order information
							// like product ids or amount
						})
							.then((response) => response.json())
							.then((order) => order.id);
					},
					// Finalize the transaction on the server after payer approval
					onApprove: (data, actions) => {
						return fetch(`/verifyPaymentPaypal/${data.orderID}/capture`, {
							method: "post",
						})
							.then((response) => response.json())
							.then((orderData) => {
								// Successful capture! For dev/demo purposes:
								console.log('Capture result', orderData, JSON.stringify(orderData, null, 2));

								const transaction = orderData.purchase_units[0].payments.captures[0];
								alert(`Transaction ${transaction.status}: ${transaction.id}\n\nSee console for all available details`);
								// When ready to go live, remove the alert and show a success message within this page. For example:
								const element = document.getElementById('paypal-button-container');
								element.innerHTML = '<h3>Thank you for your payment!</h3>';
								// Or go to another URL:  actions.redirect('thank_you.html');
								async function g() {
									if (transaction.id) {
										const saveRes = await fetch('/saveOrder', {
											method: 'GET', // or 'PUT'
											headers: {
												'Content-Type': 'application/json',
											},
										})
										if (saveRes) {
											location.assign('/orderStatus');
										}
									}
								}
								g();
							});
					}
				}).render('#paypal-button-container');

			} else if (order.id) {
				const options = {
					"key": "rzp_test_fMYGGzYHXWUmyl", // Enter the Key ID generated from the Dashboard
					"amount": order.amount, // Amount is in currency subunits. Default currency is INR. Hence, 50000 refers to 50000 paise
					"currency": "INR",
					"name": "watchstore",
					"description": "Test Transaction",
					"order_id": order.id, //This is a sample Order ID. Pass the `id` obtained in the response of Step 1
					"handler": async function (response) {
						const res = await fetch('/verifyPaymentRazorpay', {
							method: 'POST',
							headers: {
								'Content-Type': 'application/json',
							},
							body: JSON.stringify(response)
						})

						if (res) {
							const saveRes = await fetch('/saveOrder', {
								method: 'GET',
								headers: {
									'Content-Type': 'application/json',
								},
							})

							if (saveRes) {
								location.assign('/orderStatus');
							}
						}
					},
					"prefill": {
						"name": "Gaurav Kumar",
						"email": "gaurav.kumar@example.com",
						"contact": "9999999999"
					},
					"notes": {
						"address": "Razorpay Corporate Office"
					},
					"theme": {
						"color": "#3399cc"
					}
				}
				var rzp1 = new Razorpay(options);
				rzp1.on('payment.failed', function (response) {
					alert(response.error.code);
					alert(response.error.description);
					alert(response.error.source);
					alert(response.error.step);
					alert(response.error.reason);
					alert(response.error.metadata.order_id);
					alert(response.error.metadata.payment_id);
				});
				rzp1.open();
			}
		} catch (err) {
			console.log(err);
		}
	})

</script>